CCS PCH C Compiler, Version 3.214, 26547               07-Oct-15 14:54

               Filename: H:\Electrical Engineering Technology\Classes\Programming\Microcontrollers\Microcontrollers-master\Microcontrollers-master\Code-Design\Code\Analog\AnalogToDigital_00.LST

               ROM used: 2756 bytes (8%)
                         Largest free fragment is 30008
               RAM used: 83 (5%) at main() level
                         133 (9%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  GOTO   0920
*
0008:  MOVWF  05
000A:  MOVFF  FD8,06
000E:  MOVF   FE9,W
0010:  MOVWF  07
0012:  MOVF   FEA,W
0014:  MOVWF  08
0016:  MOVF   FE1,W
0018:  MOVWF  09
001A:  MOVF   FE2,W
001C:  MOVWF  0A
001E:  MOVF   FD9,W
0020:  MOVWF  0B
0022:  MOVF   FDA,W
0024:  MOVWF  0C
0026:  MOVF   FF3,W
0028:  MOVWF  14
002A:  MOVF   FF4,W
002C:  MOVWF  15
002E:  MOVF   FE0,W
0030:  MOVWF  0D
0032:  MOVLB  0
0034:  MOVF   00,W
0036:  MOVWF  0F
0038:  MOVF   01,W
003A:  MOVWF  10
003C:  MOVF   02,W
003E:  MOVWF  11
0040:  MOVF   03,W
0042:  MOVWF  12
0044:  MOVF   04,W
0046:  MOVWF  13
0048:  BTFSS  F9D.6
004A:  GOTO   0054
004E:  BTFSC  F9E.6
0050:  GOTO   0456
0054:  MOVF   0F,W
0056:  MOVWF  00
0058:  MOVF   10,W
005A:  MOVWF  01
005C:  MOVF   11,W
005E:  MOVWF  02
0060:  MOVF   12,W
0062:  MOVWF  03
0064:  MOVF   13,W
0066:  MOVWF  04
0068:  MOVF   0D,W
006A:  MOVWF  FE0
006C:  BSF    0D.7
006E:  MOVF   07,W
0070:  MOVWF  FE9
0072:  MOVF   08,W
0074:  MOVWF  FEA
0076:  MOVF   09,W
0078:  MOVWF  FE1
007A:  MOVF   0A,W
007C:  MOVWF  FE2
007E:  MOVF   0B,W
0080:  MOVWF  FD9
0082:  MOVF   0C,W
0084:  MOVWF  FDA
0086:  MOVF   14,W
0088:  MOVWF  FF3
008A:  MOVF   15,W
008C:  MOVWF  FF4
008E:  MOVF   05,W
0090:  MOVFF  06,FD8
0094:  RETFIE 0
....................  /* Initial lcd test  
....................    2015-.09.24  
....................    ../../designs/LCDpanel_1.design  
.................... */  
....................   
.................... #include "../Library/Library_18f4520.h" 
....................  /*  
....................  * Library_18f4520.h  
....................  *  
....................  *  
....................  */  
....................   
.................... // Included for compiler  
.................... // #include <18f452.h> // Different compiler  
.................... #include <18f4520.h> // Class compiler 
....................  //////// Standard Header file for the PIC18F4520 device ////////////////  
.................... #device PIC18F4520  
.................... #list  
....................  
....................   
.................... // Set lock bits and fuses  
.................... #include "../library/FusesLockBits.h" 
....................    
.................... #use delay (clock = 200000000)  
*
04EE:  CLRF   FEA
04F0:  MOVLW  64
04F2:  MOVWF  FE9
04F4:  MOVF   FEF,W
04F6:  BZ    0512
04F8:  MOVLW  40
04FA:  MOVWF  01
04FC:  CLRF   00
04FE:  DECFSZ 00,F
0500:  BRA    04FE
0502:  DECFSZ 01,F
0504:  BRA    04FC
0506:  MOVLW  D9
0508:  MOVWF  00
050A:  DECFSZ 00,F
050C:  BRA    050A
050E:  DECFSZ FEF,F
0510:  BRA    04F8
0512:  RETLW  00
.................... #fuses HS, NOWDT, NOLvP  
....................  
....................   
.................... // All register addresses are defined as: #define REGISTER_<name-of-register> <hex-of-address>  
.................... #include "../library/Register_Addresses_Definitions.h" 
....................  /*   
....................  * Register_Addresses_Definitions.h  
....................  *   
....................  * Register addresses  
....................  * 	The addresses are all defined as:  
....................  * 		#define REGISTER_<name-of-register> <hex-of-address>  
....................  *   
....................  * Notes:  
....................  * 	1: This is not a physical register.  
....................  * 	2: Unimplemented registers are read as ‘0’.  
....................  * 	3: This register is not available on 28-pin devices.  
....................  *   
....................  */  
....................   
.................... #define REGISTER_TOSU 0xFFF               // Comments needed  
.................... #define REGISTER_TOSH 0xFFE               // Comments needed  
.................... #define REGISTER_TOSL 0xFFD               // Comments needed  
....................                                                
.................... #define REGISTER_STKPTR 0xFFC             // Comments needed  
....................                                                
.................... #define REGISTER_PCLATU 0xFFB             // Comments needed  
.................... #define REGISTER_PCLATH 0xFFA             // Comments needed  
.................... #define REGISTER_PCL 0xFF9                // Comments needed  
....................                                               
.................... #define REGISTER_TBLPTRU 0xFF8            // Comments needed  
.................... #define REGISTER_TBLPTRH 0xFF7            // Comments needed  
.................... #define REGISTER_TBLPTRL 0xFF6            // Comments needed  
.................... #define REGISTER_TABLAT 0xFF5             // Comments needed  
....................                                                
.................... #define REGISTER_PRODH 0xFF4              // Comments needed  
.................... #define REGISTER_PRODL 0xFF3              // Comments needed  
....................                                                
.................... #define REGISTER_INTCON 0xFF2             // Comments needed  
.................... #define REGISTER_INTCON2 0xFF1            // Comments needed  
.................... #define REGISTER_INTCON3 0xFF0            // Comments needed  
.................... #define REGISTER_INDF0 0xFEF              // 1: This is not a physical register.  
....................   
.................... #define REGISTER_POSTINC0 0xFEE           // 1: This is not a physical register.  
.................... #define REGISTER_POSTDEC0 0xFED           // 1: This is not a physical register.  
.................... #define REGISTER_PREINC0 0xFEC            // 1: This is not a physical register.  
....................   
.................... #define REGISTER_PLUSW0 0xFEB             // 1: This is not a physical register.  
....................   
.................... #define REGISTER_FSR0H 0xFEA              // Comments needed  
.................... #define REGISTER_FSR0L 0xFE9              // Comments needed  
....................   
.................... #define REGISTER_WREG 0xFE8               // Comments needed  
....................   
.................... #define REGISTER_INDF1 0xFE7              // 1: This is not a physical register.  
....................   
.................... #define REGISTER_POSTINC1 0xFE6           // 1: This is not a physical register.  
.................... #define REGISTER_POSTDEC1 0xFE5           // 1: This is not a physical register.  
....................   
.................... #define REGISTER_PREINC1 0xFE4            // 1: This is not a physical register.  
....................   
.................... #define REGISTER_PLUSW1 0xFE3             // 1: This is not a physical register.  
....................   
.................... #define REGISTER_FSR1H 0xFE2              // Comments needed  
.................... #define REGISTER_FSR1L 0xFE1              // Comments needed  
....................   
.................... #define REGISTER_BSR 0xFE0                // Comments needed  
....................   
.................... #define REGISTER_INDF2 0xFDF              // 1: This is not a physical register.  
....................   
.................... #define REGISTER_POSTINC2 0xFDE           // 1: This is not a physical register.  
.................... #define REGISTER_POSTDEC2 0xFDD           // 1: This is not a physical register.  
.................... #define REGISTER_PREINC2 0xFDC            // 1: This is not a physical register.  
....................   
.................... #define REGISTER_PLUSW2 0xFDB             // 1: This is not a physical register.  
....................   
.................... #define REGISTER_FSR2H 0xFDA              // Comments needed  
.................... #define REGISTER_FSR2L 0xFD9              // Comments needed  
....................   
.................... #define REGISTER_STATUS 0xFD8             // Comments needed  
....................   
.................... #define REGISTER_TMR0H 0xFD7              // Comments needed  
.................... #define REGISTER_TMR0L 0xFD6              // Comments needed  
.................... #define REGISTER_T0CON 0xFD5              // Comments needed  
....................   
.................... #define REGISTER_UNIMPLEMENTED_0 0xFD4    // 2: Unimplemented registers are read as ‘0’.  
....................   
.................... #define REGISTER_OSCCON 0xFD3             // Comments needed  
....................   
.................... #define REGISTER_HLVDCON 0xFD2            // Comments needed  
....................   
.................... #define REGISTER_WDTCON 0xFD1             // Comments needed  
....................   
.................... #define REGISTER_RCON 0xFD0               // Comments needed  
....................   
.................... #define REGISTER_TMR1H 0xFCF              // Comments needed  
.................... #define REGISTER_TMR1L 0xFCE              // Comments needed  
.................... #define REGISTER_T1CON 0xFCD              // Comments needed  
.................... #define REGISTER_TMR2 0xFCC               // Comments needed  
....................   
.................... #define REGISTER_PR2 0xFCB                // Comments needed  
....................   
.................... #define REGISTER_T2CON 0xFCA              // Comments needed  
....................   
.................... #define REGISTER_SSPBUF 0xFC9             // Comments needed  
.................... #define REGISTER_SSPADD 0xFC8             // Comments needed  
.................... #define REGISTER_SSPSTAT 0xFC7            // Comments needed  
.................... #define REGISTER_SSPCON1 0xFC6            // Comments needed  
.................... #define REGISTER_SSPCON2 0xFC5            // Comments needed  
....................   
.................... #define REGISTER_ADRESH 0xFC4             // Comments needed  
.................... #define REGISTER_ADRESL 0xFC3             // Comments needed  
.................... #define REGISTER_ADCON0 0xFC2             // Comments needed  
.................... #define REGISTER_ADCON1 0xFC1             // Comments needed  
.................... #define REGISTER_ADCON2 0xFC0             // Comments needed  
....................   
.................... #define REGISTER_CCPR1H 0xFBF             // Comments needed  
.................... #define REGISTER_CCPR1L 0xFBE             // Comments needed  
.................... #define REGISTER_CCP1CON 0xFBD            // Comments needed  
.................... #define REGISTER_CCPR2H 0xFBC             // Comments needed  
.................... #define REGISTER_CCPR2L 0xFBB             // Comments needed  
.................... #define REGISTER_CCP2CON 0xFBA            // Comments needed  
....................   
.................... #define REGISTER_UNIMPLEMENTED_1 0xFB9    // 2: Unimplemented registers are read as ‘0’.  
....................   
.................... #define REGISTER_BAUDCON 0xFB8            // Comments needed  
....................   
.................... #define REGISTER_PWM1CON 0xFB7            // 3: This register is not available on 28-pin devices.  
....................   
.................... #define REGISTER_ECCP1AS 0xFB6            // 3: This register is not available on 28-pin devices.  
....................   
.................... #define REGISTER_CVRCON 0xFB5             // Comments needed  
.................... #define REGISTER_CMCON 0xFB4              // Comments needed  
.................... #define REGISTER_TMR3H 0xFB3              // Comments needed  
.................... #define REGISTER_TMR3L 0xFB2              // Comments needed  
.................... #define REGISTER_T3CON 0xFB1              // Comments needed  
....................   
.................... #define REGISTER_SPBRGH 0xFB0             // Comments needed  
.................... #define REGISTER_SPBRG 0xFAF              // Comments needed  
.................... #define REGISTER_RCREG 0xFAE              // Comments needed  
....................   
.................... #define REGISTER_TXREG 0xFAD              // Comments needed  
.................... #define REGISTER_TXSTA 0xFAC              // Comments needed  
.................... #define REGISTER_RCSTA 0xFAB              // Comments needed  
....................   
.................... #define REGISTER_UNIMPLEMENTED_2 0xFAA    // 2: Unimplemented registers are read as ‘0’.  
....................   
.................... #define REGISTER_EEADR 0xFA9              // Comments needed  
.................... #define REGISTER_EEDATA 0xFA8             // Comments needed  
.................... #define REGISTER_EECON2 0xFA7             // 1: This is not a physical register.  
.................... #define REGISTER_EECON1 0xFA6             // Comments needed  
....................   
.................... #define REGISTER_UNIMPLEMENTED_3 0xFA5    // 2: Unimplemented registers are read as ‘0’.  
.................... #define REGISTER_UNIMPLEMENTED_4 0xFA4    // 2: Unimplemented registers are read as ‘0’.  
.................... #define REGISTER_UNIMPLEMENTED_5 0xFA3    // 2: Unimplemented registers are read as ‘0’.  
....................   
.................... #define REGISTER_IPR2 0xFA2               // Comments needed  
.................... #define REGISTER_PIR2 0xFA1               // Comments needed  
.................... #define REGISTER_PIE2 0xFA0               // Comments needed  
.................... #define REGISTER_IPR1 0xF9F               // Comments needed  
.................... #define REGISTER_PIR1 0xF9E               // Comments needed  
.................... #define REGISTER_PIE1 0xF9D               // Comments needed  
....................   
.................... #define REGISTER_UNIMPLEMENTED_6 0xF9C    // 2: Unimplemented registers are read as ‘0’.  
....................   
.................... #define REGISTER_OSCTUNE 0xF9B            // Comments needed  
....................   
.................... #define REGISTER_UNIMPLEMENTED_7 0xF9A    // 2: Unimplemented registers are read as ‘0’.  
.................... #define REGISTER_UNIMPLEMENTED_8 0xF99    // 2: Unimplemented registers are read as ‘0’.  
.................... #define REGISTER_UNIMPLEMENTED_9 0xF98    // 2: Unimplemented registers are read as ‘0’.  
.................... #define REGISTER_UNIMPLEMENTED_10 0xF97   // 2: Unimplemented registers are read as ‘0’.  
....................   
.................... #define REGISTER_TRISE 0xF96              // 3: This register is not available on 28-pin devices.  
.................... #define REGISTER_TRISD 0xF95              // Comments needed  
.................... #define REGISTER_TRISC 0xF94              // Comments needed  
.................... #define REGISTER_TRISB 0xF93              // Comments needed  
.................... #define REGISTER_TRISA 0xF92              // Comments needed  
....................   
.................... #define REGISTER_UNIMPLEMENTED_11 0xF91   // 2: Unimplemented registers are read as ‘0’.  
.................... #define REGISTER_UNIMPLEMENTED_12 0xF90   // 2: Unimplemented registers are read as ‘0’.  
.................... #define REGISTER_UNIMPLEMENTED_13 0xF8F   // 2: Unimplemented registers are read as ‘0’.  
.................... #define REGISTER_UNIMPLEMENTED_14 0xF8E   // 2: Unimplemented registers are read as ‘0’.  
....................   
.................... #define REGISTER_LATE 0xF8D               // 3: This register is not available on 28-pin devices.  
.................... #define REGISTER_LATD 0xF8C               // 3: This register is not available on 28-pin devices.  
.................... #define REGISTER_LATC 0xF8B               // Comments needed  
.................... #define REGISTER_LATB 0xF8A               // Comments needed  
.................... #define REGISTER_LATA 0xF89               // Comments needed  
....................   
.................... #define REGISTER_UNIMPLEMENTED_15 0xF88   // 2: Unimplemented registers are read as ‘0’.  
.................... #define REGISTER_UNIMPLEMENTED_16 0xF87   // 2: Unimplemented registers are read as ‘0’.  
.................... #define REGISTER_UNIMPLEMENTED_17 0xF86   // 2: Unimplemented registers are read as ‘0’.  
.................... #define REGISTER_UNIMPLEMENTED_18 0xF85   // 2: Unimplemented registers are read as ‘0’.  
....................   
.................... #define REGISTER_PORTE 0xF84              // 3: This register is not available on 28-pin devices.  
.................... #define REGISTER_PORTD 0xF83              // 3: This register is not available on 28-pin devices.  
.................... #define REGISTER_PORTC 0xF82              // Comments needed  
.................... #define REGISTER_PORTB 0xF81              // Comments needed  
.................... #define REGISTER_PORTA 0xF80              // Comments needed  
....................  
....................   
.................... // Pointers to TRIS PORT and LAT registers  
.................... #include "../library/TRIS_PORT_LAT.h" 
....................  /*   
....................  * TRIS_PORT_LAT.h  
....................  *   
....................  * GPIO  
....................  *   
....................  */  
....................   
.................... int *TRISA = REGISTER_TRISA;  
.................... int *TRISB = REGISTER_TRISB;  
.................... int *TRISC = REGISTER_TRISC;  
.................... int *TRISD = REGISTER_TRISD;  
.................... int *TRISE = REGISTER_TRISE;  
....................   
.................... int *PORTA = REGISTER_PORTA;  
.................... int *PORTB = REGISTER_PORTB;  
.................... int *PORTC = REGISTER_PORTC;  
.................... int *PORTD = REGISTER_PORTD;  
.................... int *PORTE = REGISTER_PORTE;  
....................   
.................... int *LATA = REGISTER_LATA;  
.................... int *LATB = REGISTER_LATB;  
.................... int *LATC = REGISTER_LATC;  
.................... int *LATD = REGISTER_LATD;  
.................... int *LATE = REGISTER_LATE; 
....................   
.................... // Structures for analog to digital circuits and defins for Q and L  
.................... #include "../library/Analog_To_Digital.h" 
....................  /*  
....................  * Analog_To_Digital.h  
....................  *   
....................  * Analog to digital circuit connections  
....................  *   
....................  */  
....................   
.................... #define L *ADRESH  
.................... #define Q *ADRESL  
....................   
.................... int16 *ADRESH = REGISTER_ADRESH;  
.................... int16 *ADRESL = REGISTER_ADRESL;  
....................   
.................... struct ADCON_0{  
....................    int ADON:1;  
....................    int GODONE:1;  
....................    int CHSx:4;  
....................    int unused:2;  
.................... };  
.................... struct ADCON_0 *ADCON0 = REGISTER_ADCON0;  
....................   
.................... struct ADCON_1{  
....................    int PCFGx:4;  
....................    int VCFG0:1;  
....................    int VCFG1:1;  
....................    int unused:2;  
.................... };  
.................... struct ADCON_1 *ADCON1 = REGISTER_ADCON1;  
....................   
.................... struct ADCON_2{  
....................    int ADCSx:3;  
....................    int ACQTx:3;  
....................    int unused:1;  
....................    int ADFM:1;  
.................... };  
.................... struct ADCON_2 *ADCON2 = REGISTER_ADCON2;  
....................  
....................   
.................... // Structures for interrupt curcuits  
.................... #include "../library/Interrupts.h" 
....................  /*   
....................  * Interrupts.h  
....................  *   
....................  * External interrupt control  
....................  *   
....................  */  
....................   
.................... struct INTCON_{  
.................... 	int RBIF:1;  
.................... 	int INT0IF:1;  
.................... 	int TMR0IF:1;  
.................... 	int RBIE:1;  
.................... 	int INT0IE:1;  
.................... 	int TMR0IE:1;  
.................... 	int PEIE:1;  
.................... 	int GIE:1;  
.................... 	};  
.................... struct INTCON_ *INTCON = REGISTER_INTCON;  
....................   
.................... struct INTCON_2{  
.................... 	int RBIP:1;  
.................... 	int UNIMPLEMENTED_0:1;  
.................... 	int TMROIP:1;  
.................... 	int UNIMPLEMENTED_1:1;  
.................... 	int INTEDG2:1;  
.................... 	int INTEDG1:1;  
.................... 	int INTEDG0:1;  
.................... 	int RBPU:1;  
.................... 	};  
.................... struct INTCON_2 *INTCON2 = REGISTER_INTCON2;  
....................   
.................... struct INTCON_3{  
.................... 	int INT1F:1;  
.................... 	int INT2F:1;  
.................... 	int UNIMPLEMENTED_0:1;  
.................... 	int INT1E:1;  
.................... 	int INT2E:1;  
.................... 	int UNIMPLEMENTED_1:1;  
.................... 	int INT1P:1;  
.................... 	int INT2P:1;  
.................... 	};  
.................... struct INTCON_3 *INTCON3 = REGISTER_INTCON3;  
....................   
.................... /*  
....................  *   
....................  * Peripheral Interrupts Control Registers  
....................  *   
....................  */  
....................   
.................... struct PIE_1{  
.................... 	int TMR1IE:1;  
.................... 	int TMR2IE:1;  
.................... 	int CCP1IE:1;  
.................... 	int SSPIE:1;  
.................... 	int TXIE:1;  
.................... 	int RCIE:1;  
.................... 	int ADIE:1;  
.................... 	int PSPIE:1;  
.................... 	};  
.................... struct PIE_1 *PIE1 = REGISTER_PIE1;  
....................  
....................   
.................... // Custom libraries for keypad and LCD connections  
.................... #include "../library/Keypad_Connection.h" 
....................  /*  
....................  * Keypad_Connection.h  
....................  *  
....................  * Keypad Connection to PORTB  
....................  *  
....................  */  
....................   
.................... // Coloum references  
.................... #define C0 0x3  
.................... #define C1 0x5  
.................... #define C2 0x6  
....................   
.................... // Row references  
.................... #define R0 0xE  
.................... #define R1 0xD  
.................... #define R2 0xB  
.................... #define R3 0x7  
....................   
.................... // Default press  
.................... #define defaultPress '@'  
....................   
.................... struct KeypadConnection{  
....................    int COL:3;  
....................    int unused:1;  
....................    int ROW:4;  
.................... };  
.................... struct KeypadConnection *KEYPAD = REGISTER_PORTB; // PORTB  
....................   
.................... // Declarations  
.................... char keyPress(void);  
....................   
.................... // Definitions  
.................... char keyPress(void){  
....................    char press = defaultPress;  
....................   
....................    KEYPAD->COL=C0;  
....................    switch(KEYPAD->ROW){  
....................       case R0:  
....................          press = '1';  
....................          break;  
....................       case R1:  
....................          press = '4';  
....................          break;  
....................       case R2:  
....................          press = '7';  
....................          break;  
....................       case R3:  
....................          press = '*';  
....................          break;  
....................       default:  
....................    }  
....................   
....................    KEYPAD->COL=C1;  
....................    switch(KEYPAD->ROW){  
....................       case R0:  
....................          press = '2';  
....................          break;  
....................       case R1:  
....................          press = '5';  
....................          break;  
....................       case R2:  
....................          press = '8';  
....................          break;  
....................       case R3:  
....................          press = '0';  
....................          break;  
....................       default:  
....................    }  
....................   
....................    KEYPAD->COL=C2;  
....................    switch(KEYPAD->ROW){  
....................       case R0:  
....................          press = '3';  
....................          break;  
....................       case R1:  
....................          press = '6';  
....................          break;  
....................       case R2:  
....................          press = '9';  
....................          break;  
....................       case R3:  
....................          press = '#';  
....................          break;  
....................       default:  
....................    }  
....................   
....................    return(press);  
.................... }  
....................  
.................... #include "../library/Modified_LCD.h" 
....................  ///////////////////////////////////////////////////////////////////////////  
.................... ////                             Modified LCD.C                        ////  
.................... ////                 Driver for common LCD modules                     ////  
.................... ////                                                                   ////  
.................... ////  lcd_init()   Must be called before any other function.           ////  
.................... ////         ***This function was modified to fit the Samsumgs6A0069   ////  
.................... ////                                                                   ////  
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     ////  
.................... ////                     The following have special meaning:           ////  
.................... ////                      \f  Clear display                            ////  
.................... ////                      \n  Go to start of second line               ////  
.................... ////                      \b  Move back one position                   ////  
.................... ////                                                                   ////  
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    ////  
.................... ////                                                                   ////  
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         ////  
.................... ////                                                                   ////  
.................... ///////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           ////  
.................... //// This source code may only be used by licensed users of the CCS C  ////  
.................... //// compiler.  This source code may only be distributed to other      ////  
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////  
.................... //// or distribution is permitted without written permission.          ////  
.................... //// Derivative programs created using this software in object code    ////  
.................... //// form are not restricted in any way.                               ////  
.................... ///////////////////////////////////////////////////////////////////////////  
....................   
.................... // As defined in the following structure the pin connection is as follows:  
.................... //     D0  enable  
.................... //     D1  rs  
.................... //     D2  rw  
.................... //     D4  D4  
.................... //     D5  D5  
.................... //     D6  D6  
.................... //     D7  D7  
.................... //  
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used.  
....................   
.................... // Un-comment the following define to use port B  
.................... #define use_portb_lcd FALSE  
....................   
.................... // Function declerations  
.................... char lcd_getc( BYTE x, BYTE y);  
.................... void lcd_putc( char c);  
.................... void lcd_gotoxy( BYTE x, BYTE y);  
.................... void lcd_init();  
.................... void lcd_send_byte( BYTE address, BYTE n );  
.................... void lcd_send_nibble( BYTE n );  
.................... BYTE lcd_read_byte();  
....................   
....................   
....................   
.................... struct lcd_pin_map {                 // This structure is overlayed  
....................            BOOLEAN enable;           // on to an I/O port to gain  
....................            BOOLEAN rs;               // access to the LCD pins.  
....................            BOOLEAN rw;               // The bits are allocated from  
....................            BOOLEAN unused;           // low order up.  ENABLE will  
....................            int     data : 4;         // be pin B0.  
....................         }lcd;  
.................... //struct lcd_pin_map *lcd = 0xF83;  
....................   
.................... //#if defined(__PCH__)  
.................... //#if defined use_portb_lcd  
.................... //   #byte lcd = 0xF81                   // This puts the entire structure  
.................... //#else  
....................    #byte lcd = 0xF83                   // This puts the entire structure  
.................... //#endif  
.................... //#else  
.................... //#if defined use_portb_lcd  
.................... //   #byte lcd = 6                  // on to port B (at address 6)                ????????? 
.................... //#else  
.................... //   #byte lcd = 8                 // on to port D (at address 8)  
.................... //#endif  
.................... //#endif  
....................   
.................... //#if defined use_portb_lcd  
.................... //   #define set_tris_lcd(x) set_tris_b(x)  
.................... //#else  
....................    #define set_tris_lcd(x) set_tris_d(x)  
.................... //#endif  
....................   
....................   
.................... #define lcd_type 3           // 0=5x7, 1=5x10, 2=2 lines, 3=2 lines Disp ON  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line             ?????????? 
....................   
....................   
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0x0f, 0x01, 0x06};  
....................                              // These bytes need to be sent to the LCD  
....................                              // to start it up.  
....................   
....................   
....................                              // The following are used for setting  
....................                              // the I/O port direction register.  
....................   
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out  
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in  
....................   
....................   
....................   
.................... BYTE lcd_read_byte() {  
....................       BYTE low,high;  
....................       set_tris_lcd(LCD_READ);  
*
0532:  MOVLW  F0
0534:  MOVWF  F95
....................       lcd.rw = 1;  
0536:  BSF    F83.2
....................       delay_cycles(1);  
0538:  NOP   
....................       lcd.enable = 1;  
053A:  BSF    F83.0
....................       delay_cycles(1);  
053C:  NOP   
....................       high = lcd.data;  
053E:  SWAPF  F83,W
0540:  ANDLW  0F
0542:  MOVWF  6B
....................       lcd.enable = 0;  
0544:  BCF    F83.0
....................       delay_cycles(1);  
0546:  NOP   
....................       lcd.enable = 1;  
0548:  BSF    F83.0
....................       delay_us(1);  
054A:  MOVLW  10
054C:  MOVWF  00
054E:  DECFSZ 00,F
0550:  BRA    054E
0552:  NOP   
....................       low = lcd.data;  
0554:  SWAPF  F83,W
0556:  ANDLW  0F
0558:  MOVWF  6A
....................       lcd.enable = 0;  
055A:  BCF    F83.0
....................       set_tris_lcd(LCD_WRITE);  
055C:  MOVLW  00
055E:  MOVWF  F95
....................       return( (high<<4) | low);  
0560:  SWAPF  6B,W
0562:  MOVWF  00
0564:  MOVLW  F0
0566:  ANDWF  00,F
0568:  MOVF   00,W
056A:  IORWF  6A,W
056C:  MOVWF  01
.................... }  
056E:  GOTO   0576 (RETURN)
....................   
....................   
.................... void lcd_send_nibble( BYTE n ) {  
....................       lcd.data = n;  
*
0514:  SWAPF  6B,W
0516:  ANDLW  F0
0518:  MOVWF  00
051A:  MOVLW  0F
051C:  ANDWF  F83,W
051E:  IORWF  00,W
0520:  MOVWF  F83
....................       delay_cycles(1);  
0522:  NOP   
....................       lcd.enable = 1;  
0524:  BSF    F83.0
....................       delay_us(2);  
0526:  MOVLW  21
0528:  MOVWF  00
052A:  DECFSZ 00,F
052C:  BRA    052A
....................       lcd.enable = 0;  
052E:  BCF    F83.0
.................... }  
0530:  RETLW  00
....................   
....................   
.................... void lcd_send_byte( BYTE address, BYTE n ) {  
....................   
....................       lcd.rs = 0;  
*
0572:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7) ) ;  
0574:  BRA    0532
0576:  MOVFF  01,6A
057A:  BTFSC  01.7
057C:  BRA    0574
....................       lcd.rs = address;  
057E:  BTFSS  68.0
0580:  BCF    F83.1
0582:  BTFSC  68.0
0584:  BSF    F83.1
....................       delay_cycles(1);  
0586:  NOP   
....................       lcd.rw = 0;  
0588:  BCF    F83.2
....................       delay_cycles(1);  
058A:  NOP   
....................       lcd.enable = 0;  
058C:  BCF    F83.0
....................       lcd_send_nibble(n >> 4);  
058E:  SWAPF  69,W
0590:  MOVWF  6A
0592:  MOVLW  0F
0594:  ANDWF  6A,F
0596:  MOVFF  6A,6B
059A:  RCALL  0514
....................       lcd_send_nibble(n & 0xf);  
059C:  MOVF   69,W
059E:  ANDLW  0F
05A0:  MOVWF  6A
05A2:  MOVFF  6A,6B
05A6:  RCALL  0514
.................... }  
05A8:  RETLW  00
....................   
....................   
.................... void lcd_init() {  
....................     BYTE i;  
....................     set_tris_lcd(LCD_WRITE);  
05AA:  MOVLW  00
05AC:  MOVWF  F95
....................     delay_ms(45);                                      // modified  
05AE:  MOVLW  2D
05B0:  MOVWF  64
05B2:  RCALL  04EE
....................     lcd.rs = 0;  
05B4:  BCF    F83.1
....................     lcd.rw = 0;  
05B6:  BCF    F83.2
....................     lcd.enable = 0;  
05B8:  BCF    F83.0
....................     //delay_ms(15);                                    // modified  
....................     //for(i=1;i<=3;++i) {                              // modified  
....................     //   lcd_send_nibble(3);                           // modified  
....................     //   delay_ms(5);                                  // modified  
....................     //}                                                // modified  
....................     lcd_send_nibble(2);  
05BA:  MOVLW  02
05BC:  MOVWF  6B
05BE:  RCALL  0514
....................     for(i=0;i<=3;++i)  
05C0:  CLRF   51
05C2:  MOVF   51,W
05C4:  SUBLW  03
05C6:  BNC   05E2
....................        {                                                // modified  
....................           lcd_send_byte(0,LCD_INIT_STRING[i]);  
05C8:  CLRF   03
05CA:  MOVF   51,W
05CC:  RCALL  0096
05CE:  MOVWF  52
05D0:  CLRF   68
05D2:  MOVFF  52,69
05D6:  RCALL  0572
....................           delay_ms(5);                                  // modified  
05D8:  MOVLW  05
05DA:  MOVWF  64
05DC:  RCALL  04EE
....................        }                                                // modified  
05DE:  INCF   51,F
05E0:  BRA    05C2
.................... }  
05E2:  GOTO   0A14 (RETURN)
....................   
....................   
.................... void lcd_gotoxy( BYTE x, BYTE y) {  
....................    BYTE address;  
....................   
....................    if(y!=1)  
05E6:  DECFSZ 65,W
05E8:  BRA    05EC
05EA:  BRA    05F2
....................      address=lcd_line_two;  
05EC:  MOVLW  40
05EE:  MOVWF  66
....................    else  
05F0:  BRA    05F4
....................      address=0;  
05F2:  CLRF   66
....................    address+=x-1;  
05F4:  MOVLW  01
05F6:  SUBWF  64,W
05F8:  ADDWF  66,F
....................    lcd_send_byte(0,0x80|address);  
05FA:  MOVF   66,W
05FC:  IORLW  80
05FE:  MOVWF  67
0600:  CLRF   68
0602:  MOVFF  67,69
0606:  RCALL  0572
.................... }  
0608:  GOTO   064C (RETURN)
....................   
.................... void lcd_putc( char c) {  
....................    switch (c) {  
060C:  MOVF   63,W
060E:  XORLW  0C
0610:  BZ    061C
0612:  XORLW  06
0614:  BZ    062C
0616:  XORLW  02
0618:  BZ    0636
061A:  BRA    0640
....................      case '\f'   : lcd_send_byte(0,1);  
061C:  CLRF   68
061E:  MOVLW  01
0620:  MOVWF  69
0622:  RCALL  0572
....................                    delay_ms(2);  
0624:  MOVLW  02
0626:  MOVWF  64
0628:  RCALL  04EE
....................                                            break;  
062A:  BRA    064C
....................      case '\n'   : lcd_gotoxy(1,2);        break;  
062C:  MOVLW  01
062E:  MOVWF  64
0630:  MOVLW  02
0632:  MOVWF  65
0634:  BRA    05E6
....................      case '\b'   : lcd_send_byte(0,0x10);  break;  
0636:  CLRF   68
0638:  MOVLW  10
063A:  MOVWF  69
063C:  RCALL  0572
063E:  BRA    064C
....................      default     : lcd_send_byte(1,c);     break;  
0640:  MOVLW  01
0642:  MOVWF  68
0644:  MOVFF  63,69
0648:  RCALL  0572
064A:  BRA    064C
....................    }  
.................... }  
064C:  RETLW  00
....................   
.................... char lcd_getc( BYTE x, BYTE y) {  
....................    char value;  
....................   
....................     lcd_gotoxy(x,y);  
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low  
....................     lcd.rs=1;  
....................     value = lcd_read_byte();  
....................     lcd.rs=0;  
....................     return(value);  
.................... }  
....................  
....................   
....................   
....................   
....................  
....................   
.................... //float Vres = 5.0 / 1023.0;  
.................... float Vres = 6.0 / 1023.0;  
.................... float Voltage;  
....................   
.................... #INT_AD  
.................... void int_ad_isr(){  
....................    Voltage = (*ADRESL * Vres) - 3;  
*
0456:  MOVFF  38,03
045A:  MOVFF  37,FE9
045E:  MOVFF  38,FEA
0462:  MOVFF  FEC,6E
0466:  MOVF   FED,F
0468:  MOVFF  FEF,6D
046C:  MOVFF  6E,70
0470:  MOVFF  6D,6F
0474:  BRA    00B4
0476:  MOVFF  03,72
047A:  MOVFF  02,71
047E:  MOVFF  01,70
0482:  MOVFF  00,6F
0486:  MOVFF  4C,76
048A:  MOVFF  4B,75
048E:  MOVFF  4A,74
0492:  MOVFF  49,73
0496:  BRA    00EE
0498:  MOVFF  00,6F
049C:  MOVFF  01,70
04A0:  MOVFF  02,71
04A4:  MOVFF  03,72
04A8:  MOVFF  FEA,74
04AC:  MOVFF  FE9,73
04B0:  BSF    FD8.1
04B2:  MOVFF  03,78
04B6:  MOVFF  02,77
04BA:  MOVFF  01,76
04BE:  MOVFF  00,75
04C2:  CLRF   7C
04C4:  CLRF   7B
04C6:  MOVLW  40
04C8:  MOVWF  7A
04CA:  MOVLW  80
04CC:  MOVWF  79
04CE:  BRA    01E4
04D0:  MOVFF  74,FEA
04D4:  MOVFF  73,FE9
04D8:  MOVFF  03,50
04DC:  MOVFF  02,4F
04E0:  MOVFF  01,4E
04E4:  MOVFF  00,4D
.................... }  
....................   
04E8:  BCF    F9E.6
04EA:  GOTO   0054
.................... main(){  
....................   
*
0920:  CLRF   FF8
0922:  BCF    FD0.7
0924:  BSF    0D.7
0926:  CLRF   FEA
0928:  CLRF   FE9
092A:  MOVF   FC1,W
092C:  ANDLW  C0
092E:  IORLW  03
0930:  MOVWF  FC1
0932:  MOVLW  07
0934:  MOVWF  FB4
0936:  MOVF   FB4,W
0938:  BCF    FA1.6
093A:  MOVLW  92
093C:  MOVWF  17
093E:  MOVLW  0F
0940:  MOVWF  18
0942:  MOVLW  93
0944:  MOVWF  19
0946:  MOVLW  0F
0948:  MOVWF  1A
094A:  MOVLW  94
094C:  MOVWF  1B
094E:  MOVLW  0F
0950:  MOVWF  1C
0952:  MOVLW  95
0954:  MOVWF  1D
0956:  MOVLW  0F
0958:  MOVWF  1E
095A:  MOVLW  96
095C:  MOVWF  1F
095E:  MOVLW  0F
0960:  MOVWF  20
0962:  MOVLW  80
0964:  MOVWF  21
0966:  MOVLW  0F
0968:  MOVWF  22
096A:  MOVLW  81
096C:  MOVWF  23
096E:  MOVLW  0F
0970:  MOVWF  24
0972:  MOVLW  82
0974:  MOVWF  25
0976:  MOVLW  0F
0978:  MOVWF  26
097A:  MOVLW  83
097C:  MOVWF  27
097E:  MOVLW  0F
0980:  MOVWF  28
0982:  MOVLW  84
0984:  MOVWF  29
0986:  MOVLW  0F
0988:  MOVWF  2A
098A:  MOVLW  89
098C:  MOVWF  2B
098E:  MOVLW  0F
0990:  MOVWF  2C
0992:  MOVLW  8A
0994:  MOVWF  2D
0996:  MOVLW  0F
0998:  MOVWF  2E
099A:  MOVLW  8B
099C:  MOVWF  2F
099E:  MOVLW  0F
09A0:  MOVWF  30
09A2:  MOVLW  8C
09A4:  MOVWF  31
09A6:  MOVLW  0F
09A8:  MOVWF  32
09AA:  MOVLW  8D
09AC:  MOVWF  33
09AE:  MOVLW  0F
09B0:  MOVWF  34
09B2:  MOVLW  C4
09B4:  MOVWF  35
09B6:  MOVLW  0F
09B8:  MOVWF  36
09BA:  MOVLW  C3
09BC:  MOVWF  37
09BE:  MOVLW  0F
09C0:  MOVWF  38
09C2:  MOVLW  C2
09C4:  MOVWF  39
09C6:  MOVLW  0F
09C8:  MOVWF  3A
09CA:  MOVLW  C1
09CC:  MOVWF  3B
09CE:  MOVLW  0F
09D0:  MOVWF  3C
09D2:  MOVLW  C0
09D4:  MOVWF  3D
09D6:  MOVLW  0F
09D8:  MOVWF  3E
09DA:  MOVLW  F2
09DC:  MOVWF  3F
09DE:  MOVLW  0F
09E0:  MOVWF  40
09E2:  MOVLW  F1
09E4:  MOVWF  41
09E6:  MOVLW  0F
09E8:  MOVWF  42
09EA:  MOVLW  F0
09EC:  MOVWF  43
09EE:  MOVLW  0F
09F0:  MOVWF  44
09F2:  MOVLW  9D
09F4:  MOVWF  45
09F6:  MOVLW  0F
09F8:  MOVWF  46
09FA:  MOVLW  81
09FC:  MOVWF  47
09FE:  MOVLW  0F
0A00:  MOVWF  48
0A02:  MOVLW  77
0A04:  MOVWF  49
0A06:  MOVLW  40
0A08:  MOVWF  4A
0A0A:  MOVLW  30
0A0C:  MOVWF  4B
0A0E:  MOVLW  0C
0A10:  MOVWF  4C
....................    lcd_init();  
0A12:  BRA    05AA
....................    //printf(lcd_putc, "\fHello \n:)");  
....................   
....................    ADCON0->ADON = 1;  
0A14:  MOVFF  39,FE9
0A18:  MOVFF  3A,FEA
0A1C:  BSF    FEF.0
....................    ADCON0->CHSx = 0;  
0A1E:  MOVFF  39,FE9
0A22:  MOVFF  3A,FEA
0A26:  MOVLW  C3
0A28:  ANDWF  FEF,W
0A2A:  MOVWF  FEF
....................    ADCON1->PCFGX = 8;  
0A2C:  MOVFF  3B,FE9
0A30:  MOVFF  3C,FEA
0A34:  MOVLW  F0
0A36:  ANDWF  FEF,W
0A38:  IORLW  08
0A3A:  MOVWF  FEF
....................   
....................    *TRISA = 0x01;  // set A0 as input  
0A3C:  MOVFF  17,FE9
0A40:  MOVFF  18,FEA
0A44:  MOVLW  01
0A46:  MOVWF  FEF
....................   
....................    ADCON2->ADFM = 1; // right justify  
0A48:  MOVFF  3D,FE9
0A4C:  MOVFF  3E,FEA
0A50:  BSF    FEF.7
....................   
....................    // enable references  
....................    ADCON1->VCFG0 = 1;  
0A52:  MOVFF  3B,FE9
0A56:  MOVFF  3C,FEA
0A5A:  BSF    FEF.4
....................    ADCON1->VCFG1 = 1;  
0A5C:  MOVFF  3B,FE9
0A60:  MOVFF  3C,FEA
0A64:  BSF    FEF.5
....................   
....................   
....................    // interrupt setup  
....................    PIE1->ADIE = 1;  
0A66:  MOVFF  45,FE9
0A6A:  MOVFF  46,FEA
0A6E:  BSF    FEF.6
....................    INTCON->GIE = 1;  
0A70:  MOVFF  3F,FE9
0A74:  MOVFF  40,FEA
0A78:  BSF    FEF.7
....................    INTCON->PEIE = 1;  
0A7A:  MOVFF  3F,FE9
0A7E:  MOVFF  40,FEA
0A82:  BSF    FEF.6
....................   
....................    while(1){  
....................   
....................       printf(lcd_putc, "\f %fV", Voltage);  
0A84:  MOVLW  0C
0A86:  MOVWF  63
0A88:  RCALL  060C
0A8A:  MOVLW  20
0A8C:  MOVWF  63
0A8E:  RCALL  060C
0A90:  MOVFF  50,54
0A94:  MOVFF  4F,53
0A98:  MOVFF  4E,52
0A9C:  MOVFF  4D,51
0AA0:  CLRF   58
0AA2:  CLRF   57
0AA4:  MOVLW  01
0AA6:  MOVWF  56
0AA8:  MOVLW  06
0AAA:  MOVWF  55
0AAC:  BRA    064E
0AAE:  MOVLW  56
0AB0:  MOVWF  63
0AB2:  RCALL  060C
....................          
....................       ADCON0->GODONE = 1;  
0AB4:  MOVFF  39,FE9
0AB8:  MOVFF  3A,FEA
0ABC:  BSF    FEF.1
....................         
....................       delay_ms(20);  
0ABE:  MOVLW  14
0AC0:  MOVWF  64
0AC2:  RCALL  04EE
....................   
....................    };  
0AC4:  BRA    0A84
.................... }  
....................  
0AC6:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS IESO FCMEN
   Word  2: 1E0F   BROWNOUT NOWDT BORV25 NOPUT WDT32768
   Word  3: 8700   PBADEN CCP2C1 LPT1OSC MCLR
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
