CCS PCH C Compiler, Version 3.214, 26547               24-Sep-15 14:28

               Filename: H:\Electrical Engineering Technology\Classes\Microcontrollers\Code\LCD\lcd.LST

               ROM used: 1836 bytes (6%)
                         Largest free fragment is 30932
               RAM used: 44 (3%) at main() level
                         72 (5%) worst case
               Stack:    5 locations

*
0000:  GOTO   0590
....................  /* Initial lcd test  
....................    2015-.09.24  
....................    ../../designs/LCDpanel_1.design  
.................... */  
....................   
.................... #include <18f4520.h> 
....................  //////// Standard Header file for the PIC18F4520 device ////////////////  
.................... #device PIC18F4520  
.................... #list  
....................  
.................... #use delay (clock = 200000000)  
*
002E:  CLRF   FEA
0030:  MOVLW  3F
0032:  MOVWF  FE9
0034:  MOVF   FEF,W
0036:  BZ    0052
0038:  MOVLW  40
003A:  MOVWF  01
003C:  CLRF   00
003E:  DECFSZ 00,F
0040:  BRA    003E
0042:  DECFSZ 01,F
0044:  BRA    003C
0046:  MOVLW  D9
0048:  MOVWF  00
004A:  DECFSZ 00,F
004C:  BRA    004A
004E:  DECFSZ FEF,F
0050:  BRA    0038
0052:  RETLW  00
.................... #fuses HS, NOWDT, NOLvP  
.................... #include "../Library/18f4520ptr.h" 
....................  #include "../library/GPIO.h" 
....................  // GPIO  
.................... int *TRISA = 0xF92;  
.................... int *TRISB = 0xF93;  
.................... int *TRISC = 0xF94;  
....................   
.................... int *PORTA = 0xF80;  
.................... int *PORTB = 0xF81;  
.................... int *PORTC = 0xF82;  
....................  
.................... #include "../library/Analog.h" 
....................  // Analog to digital circuit  
.................... // INT *ADCON1 = 0xFC1;  
....................   
.................... #define L *ADRESH  
.................... #define Q *ADRESL  
....................   
.................... int16 *ADRESH = 0xFC4;  
.................... int16 *ADRESL = 0xFC3;  
....................   
.................... struct ADCON_0{  
....................    int ADON:1;  
....................    int GODONE:1;  
....................    int CHSx:4;  
....................    int unused:2;  
.................... };  
.................... struct ADCON_0 *ADCON0 = 0xFC2;  
....................   
.................... struct ADCON_1{  
....................    int PCFGx:4;  
....................    int VCFG0:1;  
....................    int VCFG1:1;  
....................    int unused:2;  
.................... };  
.................... struct ADCON_1 *ADCON1 = 0xFC1;  
....................   
.................... struct ADCON_2{  
....................    int ADCSx:3;  
....................    int ACQTx:3;  
....................    int unused:1;  
....................    int ADFM:1;  
.................... };  
.................... struct ADCON_2 *ADCON2 = 0xFC0;  
....................  
.................... #include "../library/Interrupts.h" 
....................  // External interrupt control  
....................   
.................... // int *INTCON0=0xFF2;  
.................... // int *INTCON1=0xFF1;  
.................... // int *INTCON2=0xFF0;  
....................   
.................... struct INTCON_0{  
.................... 	int RBIF:1;  
.................... 	int INT0IF:1;  
.................... 	int TMR0IF:1;  
.................... 	int RBIE:1;  
.................... 	int INT0IE:1;  
.................... 	int TMR0IE:1;  
.................... 	int PEIE:1;  
.................... 	int GIE:1;  
.................... 	};  
.................... struct INTCON_0 *INTCON0 = 0xFF2;  
....................   
.................... struct INTCON_1{  
.................... 	int RBIP:1;  
.................... 	int UNIMPLEMENTED_0:1;  
.................... 	int TMROIP:1;  
.................... 	int UNIMPLEMENTED_1:1;  
.................... 	int INTEDG2:1;  
.................... 	int INTEDG1:1;  
.................... 	int INTEDG0:1;  
.................... 	int RBPU:1;  
.................... 	};  
.................... struct INTCON_1 *INTCON1 = 0xFF1;  
....................   
.................... struct INTCON_2{  
.................... 	int INT1F:1;  
.................... 	int INT2F:1;  
.................... 	int UNIMPLEMENTED_0:1;  
.................... 	int INT1E:1;  
.................... 	int INT2E:1;  
.................... 	int UNIMPLEMENTED_1:1;  
.................... 	int INT1P:1;  
.................... 	int INT2P:1;  
.................... 	};  
.................... struct INTCON_2 *INTCON2 = 0xFF0;  
....................  
.................... #include "../library/PeripheralInterrupts.h" 
....................  // Peripheral Interrupts Control Registers  
....................   
.................... struct PIE_1{  
.................... 	int TMR1IE:1;  
.................... 	int TMR2IE:1;  
.................... 	int CCP1IE:1;  
.................... 	int SSPIE:1;  
.................... 	int TXIE:1;  
.................... 	int RCIE:1;  
.................... 	int ADIE:1;  
.................... 	int PSPIE:1;  
.................... 	};  
.................... struct PIE_1 *PIE1 = 0xFF2;  
....................  
....................   
....................   
....................   
....................  
.................... #include "../library/modifiedlcd.h" 
....................  ///////////////////////////////////////////////////////////////////////////  
.................... ////                             Modified LCD.C                        ////  
.................... ////                 Driver for common LCD modules                     ////  
.................... ////                                                                   ////  
.................... ////  lcd_init()   Must be called before any other function.           ////  
.................... ////         ***This function was modified to fit the Samsumgs6A0069   ////  
.................... ////                                                                   ////  
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     ////  
.................... ////                     The following have special meaning:           ////  
.................... ////                      \f  Clear display                            ////  
.................... ////                      \n  Go to start of second line               ////  
.................... ////                      \b  Move back one position                   ////  
.................... ////                                                                   ////  
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    ////  
.................... ////                                                                   ////  
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         ////  
.................... ////                                                                   ////  
.................... ///////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           ////  
.................... //// This source code may only be used by licensed users of the CCS C  ////  
.................... //// compiler.  This source code may only be distributed to other      ////  
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////  
.................... //// or distribution is permitted without written permission.          ////  
.................... //// Derivative programs created using this software in object code    ////  
.................... //// form are not restricted in any way.                               ////  
.................... ///////////////////////////////////////////////////////////////////////////  
....................   
.................... // As defined in the following structure the pin connection is as follows:  
.................... //     D0  enable  
.................... //     D1  rs  
.................... //     D2  rw  
.................... //     D4  D4  
.................... //     D5  D5  
.................... //     D6  D6  
.................... //     D7  D7  
.................... //  
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used.  
....................   
.................... // Un-comment the following define to use port B  
.................... #define use_portb_lcd FALSE  
....................   
....................   
.................... struct lcd_pin_map {                 // This structure is overlayed  
....................            BOOLEAN enable;           // on to an I/O port to gain  
....................            BOOLEAN rs;               // access to the LCD pins.  
....................            BOOLEAN rw;               // The bits are allocated from  
....................            BOOLEAN unused;           // low order up.  ENABLE will  
....................            int     data : 4;         // be pin B0.  
....................         }lcd;  
.................... //struct lcd_pin_map *lcd = 0xF83;  
....................   
.................... //#if defined(__PCH__)  
.................... //#if defined use_portb_lcd  
.................... //   #byte lcd = 0xF81                   // This puts the entire structure  
.................... //#else  
....................    #byte lcd = 0xF83                   // This puts the entire structure  
.................... //#endif  
.................... //#else  
.................... //#if defined use_portb_lcd  
.................... //   #byte lcd = 6                  // on to port B (at address 6)                ????????? 
.................... //#else  
.................... //   #byte lcd = 8                 // on to port D (at address 8)  
.................... //#endif  
.................... //#endif  
....................   
.................... //#if defined use_portb_lcd  
.................... //   #define set_tris_lcd(x) set_tris_b(x)  
.................... //#else  
....................    #define set_tris_lcd(x) set_tris_d(x)  
.................... //#endif  
....................   
....................   
.................... #define lcd_type 3           // 0=5x7, 1=5x10, 2=2 lines, 3=2 lines Disp ON  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line             ?????????? 
....................   
....................   
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0x0f, 0x01, 0x06};  
....................                              // These bytes need to be sent to the LCD  
....................                              // to start it up.  
....................   
....................   
....................                              // The following are used for setting  
....................                              // the I/O port direction register.  
....................   
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out  
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in  
....................   
....................   
....................   
.................... BYTE lcd_read_byte() {  
....................       BYTE low,high;  
....................       set_tris_lcd(LCD_READ);  
*
0072:  MOVLW  F0
0074:  MOVWF  F95
....................       lcd.rw = 1;  
0076:  BSF    F83.2
....................       delay_cycles(1);  
0078:  NOP   
....................       lcd.enable = 1;  
007A:  BSF    F83.0
....................       delay_cycles(1);  
007C:  NOP   
....................       high = lcd.data;  
007E:  SWAPF  F83,W
0080:  ANDLW  0F
0082:  MOVWF  46
....................       lcd.enable = 0;  
0084:  BCF    F83.0
....................       delay_cycles(1);  
0086:  NOP   
....................       lcd.enable = 1;  
0088:  BSF    F83.0
....................       delay_us(1);  
008A:  MOVLW  10
008C:  MOVWF  00
008E:  DECFSZ 00,F
0090:  BRA    008E
0092:  NOP   
....................       low = lcd.data;  
0094:  SWAPF  F83,W
0096:  ANDLW  0F
0098:  MOVWF  45
....................       lcd.enable = 0;  
009A:  BCF    F83.0
....................       set_tris_lcd(LCD_WRITE);  
009C:  MOVLW  00
009E:  MOVWF  F95
....................       return( (high<<4) | low);  
00A0:  SWAPF  46,W
00A2:  MOVWF  00
00A4:  MOVLW  F0
00A6:  ANDWF  00,F
00A8:  MOVF   00,W
00AA:  IORWF  45,W
00AC:  MOVWF  01
.................... }  
00AE:  GOTO   00B6 (RETURN)
....................   
....................   
.................... void lcd_send_nibble( BYTE n ) {  
....................       lcd.data = n;  
*
0054:  SWAPF  46,W
0056:  ANDLW  F0
0058:  MOVWF  00
005A:  MOVLW  0F
005C:  ANDWF  F83,W
005E:  IORWF  00,W
0060:  MOVWF  F83
....................       delay_cycles(1);  
0062:  NOP   
....................       lcd.enable = 1;  
0064:  BSF    F83.0
....................       delay_us(2);  
0066:  MOVLW  21
0068:  MOVWF  00
006A:  DECFSZ 00,F
006C:  BRA    006A
....................       lcd.enable = 0;  
006E:  BCF    F83.0
.................... }  
0070:  RETLW  00
....................   
....................   
.................... void lcd_send_byte( BYTE address, BYTE n ) {  
....................   
....................       lcd.rs = 0;  
*
00B2:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7) ) ;  
00B4:  BRA    0072
00B6:  MOVFF  01,45
00BA:  BTFSC  01.7
00BC:  BRA    00B4
....................       lcd.rs = address;  
00BE:  BTFSS  43.0
00C0:  BCF    F83.1
00C2:  BTFSC  43.0
00C4:  BSF    F83.1
....................       delay_cycles(1);  
00C6:  NOP   
....................       lcd.rw = 0;  
00C8:  BCF    F83.2
....................       delay_cycles(1);  
00CA:  NOP   
....................       lcd.enable = 0;  
00CC:  BCF    F83.0
....................       lcd_send_nibble(n >> 4);  
00CE:  SWAPF  44,W
00D0:  MOVWF  45
00D2:  MOVLW  0F
00D4:  ANDWF  45,F
00D6:  MOVFF  45,46
00DA:  RCALL  0054
....................       lcd_send_nibble(n & 0xf);  
00DC:  MOVF   44,W
00DE:  ANDLW  0F
00E0:  MOVWF  45
00E2:  MOVFF  45,46
00E6:  RCALL  0054
.................... }  
00E8:  RETLW  00
....................   
....................   
.................... void lcd_init() {  
....................     BYTE i;  
....................     set_tris_lcd(LCD_WRITE);  
00EA:  MOVLW  00
00EC:  MOVWF  F95
....................     delay_ms(45);                                      // modified  
00EE:  MOVLW  2D
00F0:  MOVWF  3F
00F2:  RCALL  002E
....................     lcd.rs = 0;  
00F4:  BCF    F83.1
....................     lcd.rw = 0;  
00F6:  BCF    F83.2
....................     lcd.enable = 0;  
00F8:  BCF    F83.0
....................     //delay_ms(15);                                    // modified  
....................     //for(i=1;i<=3;++i) {                              // modified  
....................     //   lcd_send_nibble(3);                           // modified  
....................     //   delay_ms(5);                                  // modified  
....................     //}                                                // modified  
....................     lcd_send_nibble(2);  
00FA:  MOVLW  02
00FC:  MOVWF  46
00FE:  RCALL  0054
....................     for(i=0;i<=3;++i)  
0100:  CLRF   27
0102:  MOVF   27,W
0104:  SUBLW  03
0106:  BNC   0122
....................        {                                                // modified  
....................           lcd_send_byte(0,LCD_INIT_STRING[i]);  
0108:  CLRF   03
010A:  MOVF   27,W
010C:  RCALL  0004
010E:  MOVWF  28
0110:  CLRF   43
0112:  MOVFF  28,44
0116:  RCALL  00B2
....................           delay_ms(5);                                  // modified  
0118:  MOVLW  05
011A:  MOVWF  3F
011C:  RCALL  002E
....................        }                                                // modified  
011E:  INCF   27,F
0120:  BRA    0102
.................... }  
0122:  GOTO   0632 (RETURN)
....................   
....................   
.................... void lcd_gotoxy( BYTE x, BYTE y) {  
....................    BYTE address;  
....................   
....................    if(y!=1)  
0126:  DECFSZ 40,W
0128:  BRA    012C
012A:  BRA    0132
....................      address=lcd_line_two;  
012C:  MOVLW  40
012E:  MOVWF  41
....................    else  
0130:  BRA    0134
....................      address=0;  
0132:  CLRF   41
....................    address+=x-1;  
0134:  MOVLW  01
0136:  SUBWF  3F,W
0138:  ADDWF  41,F
....................    lcd_send_byte(0,0x80|address);  
013A:  MOVF   41,W
013C:  IORLW  80
013E:  MOVWF  42
0140:  CLRF   43
0142:  MOVFF  42,44
0146:  RCALL  00B2
.................... }  
0148:  GOTO   018C (RETURN)
....................   
.................... void lcd_putc( char c) {  
....................    switch (c) {  
014C:  MOVF   3E,W
014E:  XORLW  0C
0150:  BZ    015C
0152:  XORLW  06
0154:  BZ    016C
0156:  XORLW  02
0158:  BZ    0176
015A:  BRA    0180
....................      case '\f'   : lcd_send_byte(0,1);  
015C:  CLRF   43
015E:  MOVLW  01
0160:  MOVWF  44
0162:  RCALL  00B2
....................                    delay_ms(2);  
0164:  MOVLW  02
0166:  MOVWF  3F
0168:  RCALL  002E
....................                                            break;  
016A:  BRA    018C
....................      case '\n'   : lcd_gotoxy(1,2);        break;  
016C:  MOVLW  01
016E:  MOVWF  3F
0170:  MOVLW  02
0172:  MOVWF  40
0174:  BRA    0126
....................      case '\b'   : lcd_send_byte(0,0x10);  break;  
0176:  CLRF   43
0178:  MOVLW  10
017A:  MOVWF  44
017C:  RCALL  00B2
017E:  BRA    018C
....................      default     : lcd_send_byte(1,c);     break;  
0180:  MOVLW  01
0182:  MOVWF  43
0184:  MOVFF  3E,44
0188:  RCALL  00B2
018A:  BRA    018C
....................    }  
.................... }  
018C:  RETLW  00
....................   
.................... char lcd_getc( BYTE x, BYTE y) {  
....................    char value;  
....................   
....................     lcd_gotoxy(x,y);  
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low  
....................     lcd.rs=1;  
....................     value = lcd_read_byte();  
....................     lcd.rs=0;  
....................     return(value);  
.................... }  
....................  
....................   
.................... float Vres = 5.0 / 1023.0;  
....................   
.................... main(){  
....................   
*
0590:  CLRF   FF8
0592:  BCF    FD0.7
0594:  CLRF   FEA
0596:  CLRF   FE9
0598:  MOVF   FC1,W
059A:  ANDLW  C0
059C:  IORLW  03
059E:  MOVWF  FC1
05A0:  MOVLW  07
05A2:  MOVWF  FB4
05A4:  MOVF   FB4,W
05A6:  BCF    FA1.6
05A8:  MOVLW  92
05AA:  MOVWF  05
05AC:  MOVLW  0F
05AE:  MOVWF  06
05B0:  MOVLW  93
05B2:  MOVWF  07
05B4:  MOVLW  0F
05B6:  MOVWF  08
05B8:  MOVLW  94
05BA:  MOVWF  09
05BC:  MOVLW  0F
05BE:  MOVWF  0A
05C0:  MOVLW  80
05C2:  MOVWF  0B
05C4:  MOVLW  0F
05C6:  MOVWF  0C
05C8:  MOVLW  81
05CA:  MOVWF  0D
05CC:  MOVLW  0F
05CE:  MOVWF  0E
05D0:  MOVLW  82
05D2:  MOVWF  0F
05D4:  MOVLW  0F
05D6:  MOVWF  10
05D8:  MOVLW  C4
05DA:  MOVWF  11
05DC:  MOVLW  0F
05DE:  MOVWF  12
05E0:  MOVLW  C3
05E2:  MOVWF  13
05E4:  MOVLW  0F
05E6:  MOVWF  14
05E8:  MOVLW  C2
05EA:  MOVWF  15
05EC:  MOVLW  0F
05EE:  MOVWF  16
05F0:  MOVLW  C1
05F2:  MOVWF  17
05F4:  MOVLW  0F
05F6:  MOVWF  18
05F8:  MOVLW  C0
05FA:  MOVWF  19
05FC:  MOVLW  0F
05FE:  MOVWF  1A
0600:  MOVLW  F2
0602:  MOVWF  1B
0604:  MOVLW  0F
0606:  MOVWF  1C
0608:  MOVLW  F1
060A:  MOVWF  1D
060C:  MOVLW  0F
060E:  MOVWF  1E
0610:  MOVLW  F0
0612:  MOVWF  1F
0614:  MOVLW  0F
0616:  MOVWF  20
0618:  MOVLW  F2
061A:  MOVWF  21
061C:  MOVLW  0F
061E:  MOVWF  22
0620:  MOVLW  77
0622:  MOVWF  23
0624:  MOVLW  20
0626:  MOVWF  24
0628:  MOVLW  28
062A:  MOVWF  25
062C:  MOVLW  0A
062E:  MOVWF  26
....................    lcd_init();  
0630:  BRA    00EA
....................    //printf(lcd_putc, "\fHello \n:)");  
....................   
....................    ADCON0->ADON = 1;  
0632:  MOVFF  15,FE9
0636:  MOVFF  16,FEA
063A:  BSF    FEF.0
....................    ADCON0->CHSx = 1;  
063C:  MOVFF  15,FE9
0640:  MOVFF  16,FEA
0644:  MOVLW  C3
0646:  ANDWF  FEF,W
0648:  IORLW  04
064A:  MOVWF  FEF
....................    ADCON1->PCFGX = 8;  
064C:  MOVFF  17,FE9
0650:  MOVFF  18,FEA
0654:  MOVLW  F0
0656:  ANDWF  FEF,W
0658:  IORLW  08
065A:  MOVWF  FEF
....................   
....................    *TRISA = 0x02;  // set A0 as input  
065C:  MOVFF  05,FE9
0660:  MOVFF  06,FEA
0664:  MOVLW  02
0666:  MOVWF  FEF
....................   
....................    ADCON2->ADFM = 1; // right justify  
0668:  MOVFF  19,FE9
066C:  MOVFF  1A,FEA
0670:  BSF    FEF.7
....................   
....................    while(1){  
....................   
....................       ADCON0->GODONE = 1; // go  
0672:  MOVFF  15,FE9
0676:  MOVFF  16,FEA
067A:  BSF    FEF.1
....................       while(ADCON0->GODONE){}  
067C:  MOVFF  15,FE9
0680:  MOVFF  16,FEA
0684:  BTFSS  FEF.1
0686:  BRA    068A
0688:  BRA    067C
....................   
....................       printf(lcd_putc, "\f lcd");  
068A:  CLRF   27
068C:  MOVF   27,W
068E:  RCALL  0018
0690:  INCF   27,F
0692:  MOVWF  00
0694:  MOVFF  00,3E
0698:  RCALL  014C
069A:  MOVLW  05
069C:  SUBWF  27,W
069E:  BNZ   068C
....................       printf(lcd_putc, "\n %f", *Q * Vres);  
06A0:  MOVFF  13,FE9
06A4:  MOVFF  14,FEA
06A8:  MOVFF  FEC,03
06AC:  MOVF   FED,F
06AE:  MOVFF  FEF,FE9
06B2:  MOVFF  03,FEA
06B6:  CLRF   29
06B8:  MOVFF  FEF,28
06BC:  BRA    018E
06BE:  MOVFF  03,2B
06C2:  MOVFF  02,2A
06C6:  MOVFF  01,29
06CA:  MOVFF  00,28
06CE:  MOVFF  26,2F
06D2:  MOVFF  25,2E
06D6:  MOVFF  24,2D
06DA:  MOVFF  23,2C
06DE:  BRA    01C8
06E0:  MOVFF  00,28
06E4:  MOVFF  01,29
06E8:  MOVFF  02,2A
06EC:  MOVFF  03,2B
06F0:  MOVLW  0A
06F2:  MOVWF  3E
06F4:  RCALL  014C
06F6:  MOVLW  20
06F8:  MOVWF  3E
06FA:  RCALL  014C
06FC:  MOVFF  2B,2F
0700:  MOVFF  2A,2E
0704:  MOVFF  29,2D
0708:  MOVFF  28,2C
070C:  CLRF   33
070E:  CLRF   32
0710:  MOVLW  01
0712:  MOVWF  31
0714:  MOVLW  06
0716:  MOVWF  30
0718:  BRA    02BE
....................   
....................       delay_ms(300);  
071A:  MOVLW  02
071C:  MOVWF  27
071E:  MOVLW  96
0720:  MOVWF  3F
0722:  RCALL  002E
0724:  DECFSZ 27,F
0726:  BRA    071E
....................   
....................    };  
0728:  BRA    0672
.................... }  
....................  
072A:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS IESO FCMEN
   Word  2: 1E0F   BROWNOUT NOWDT BORV25 NOPUT WDT32768
   Word  3: 8700   PBADEN CCP2C1 LPT1OSC MCLR
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
